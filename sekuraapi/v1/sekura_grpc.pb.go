// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	// Allows an Agent to register itself. Will require approval.
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// Agent endpoint to send user data. Requires the agent to be registered and approved.
	SetAccess(ctx context.Context, in *SetAccessRequest, opts ...grpc.CallOption) (*SetAccessResponse, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.AgentService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) SetAccess(ctx context.Context, in *SetAccessRequest, opts ...grpc.CallOption) (*SetAccessResponse, error) {
	out := new(SetAccessResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.AgentService/SetAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	// Allows an Agent to register itself. Will require approval.
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// Agent endpoint to send user data. Requires the agent to be registered and approved.
	SetAccess(context.Context, *SetAccessRequest) (*SetAccessResponse, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAgentServiceServer) SetAccess(context.Context, *SetAccessRequest) (*SetAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccess not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.AgentService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_SetAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).SetAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.AgentService/SetAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).SetAccess(ctx, req.(*SetAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekuraapi.v1.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AgentService_Register_Handler,
		},
		{
			MethodName: "SetAccess",
			Handler:    _AgentService_SetAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekuraapi/v1/sekura.proto",
}

// UIServiceClient is the client API for UIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UIServiceClient interface {
	// List all available agents
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	// Set agent status to Approved or Revoked
	SetAgent(ctx context.Context, in *SetAgentRequest, opts ...grpc.CallOption) (*SetAgentResponse, error)
	// Retrieve the list of employees
	ListEmployees(ctx context.Context, in *ListEmployeesRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error)
	// Retrieve the list of Accesses for a given Agent
	ListAccess(ctx context.Context, in *ListAccessRequest, opts ...grpc.CallOption) (*ListAccessResponse, error)
}

type uIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUIServiceClient(cc grpc.ClientConnInterface) UIServiceClient {
	return &uIServiceClient{cc}
}

func (c *uIServiceClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.UIService/ListAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) SetAgent(ctx context.Context, in *SetAgentRequest, opts ...grpc.CallOption) (*SetAgentResponse, error) {
	out := new(SetAgentResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.UIService/SetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) ListEmployees(ctx context.Context, in *ListEmployeesRequest, opts ...grpc.CallOption) (*ListEmployeesResponse, error) {
	out := new(ListEmployeesResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.UIService/ListEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIServiceClient) ListAccess(ctx context.Context, in *ListAccessRequest, opts ...grpc.CallOption) (*ListAccessResponse, error) {
	out := new(ListAccessResponse)
	err := c.cc.Invoke(ctx, "/sekuraapi.v1.UIService/ListAccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UIServiceServer is the server API for UIService service.
// All implementations must embed UnimplementedUIServiceServer
// for forward compatibility
type UIServiceServer interface {
	// List all available agents
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	// Set agent status to Approved or Revoked
	SetAgent(context.Context, *SetAgentRequest) (*SetAgentResponse, error)
	// Retrieve the list of employees
	ListEmployees(context.Context, *ListEmployeesRequest) (*ListEmployeesResponse, error)
	// Retrieve the list of Accesses for a given Agent
	ListAccess(context.Context, *ListAccessRequest) (*ListAccessResponse, error)
	mustEmbedUnimplementedUIServiceServer()
}

// UnimplementedUIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUIServiceServer struct {
}

func (UnimplementedUIServiceServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedUIServiceServer) SetAgent(context.Context, *SetAgentRequest) (*SetAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAgent not implemented")
}
func (UnimplementedUIServiceServer) ListEmployees(context.Context, *ListEmployeesRequest) (*ListEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmployees not implemented")
}
func (UnimplementedUIServiceServer) ListAccess(context.Context, *ListAccessRequest) (*ListAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccess not implemented")
}
func (UnimplementedUIServiceServer) mustEmbedUnimplementedUIServiceServer() {}

// UnsafeUIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UIServiceServer will
// result in compilation errors.
type UnsafeUIServiceServer interface {
	mustEmbedUnimplementedUIServiceServer()
}

func RegisterUIServiceServer(s grpc.ServiceRegistrar, srv UIServiceServer) {
	s.RegisterService(&UIService_ServiceDesc, srv)
}

func _UIService_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.UIService/ListAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_SetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).SetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.UIService/SetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).SetAgent(ctx, req.(*SetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_ListEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).ListEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.UIService/ListEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).ListEmployees(ctx, req.(*ListEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UIService_ListAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServiceServer).ListAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sekuraapi.v1.UIService/ListAccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServiceServer).ListAccess(ctx, req.(*ListAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UIService_ServiceDesc is the grpc.ServiceDesc for UIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sekuraapi.v1.UIService",
	HandlerType: (*UIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _UIService_ListAgents_Handler,
		},
		{
			MethodName: "SetAgent",
			Handler:    _UIService_SetAgent_Handler,
		},
		{
			MethodName: "ListEmployees",
			Handler:    _UIService_ListEmployees_Handler,
		},
		{
			MethodName: "ListAccess",
			Handler:    _UIService_ListAccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sekuraapi/v1/sekura.proto",
}
